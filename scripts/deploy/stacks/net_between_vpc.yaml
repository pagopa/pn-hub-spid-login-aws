AWSTemplateFormatVersion: '2010-09-09'
Description: SPID Hub - Orchestrator


Parameters:

  InternalVpcId:
    Description: The ID of the VPC
    Default: vpc-0481e419f6467daa9
    Type: AWS::EC2::VPC::Id

  InternalSubnets:
    Description: The subnets on which the balancer will listen at, one for each availability zone in the order a,b,c
    Default: subnet-0ec2b4cab530bc74a,subnet-01a744f9d40f77ad6,subnet-0e16b812cf75d5158
    Type: List<AWS::EC2::Subnet::Id>
  
  InternalNlbIps:
    Description: The list of ips of the internal network load balancer
    Default: '10.2.63.200,10.2.127.200,10.2.191.200'
    Type: List<String>
  
  ExternalVpcId:
    Description: The ID of the VPC
    Default: vpc-0b2678b596a1cc1c3
    Type: AWS::EC2::VPC::Id

  ExternalSubnets:
    Description: The subnets on which the balancer will listen at
    Default: subnet-0c20dc5232c3df75a,subnet-0c1df1267d77c1e92,subnet-075f49d9f787e18de
    Type: List<AWS::EC2::Subnet::Id>

  DomainName:
    Description: The Domain Name
    Type: String
    Default: 'test-net.svil.pn.pagopa.it'
    AllowedPattern: ^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$

  HostedZoneId:
    Description: The ID of the Route 53 Hosted Zone
    Default: 'Z08035123HZSLKM6HYHUT'
    Type: AWS::Route53::HostedZone::Id
    AllowedPattern: ^Z[0-9]{6}([0-9])*[A-Z0-9]{6}([A-Z0-9])*$


Resources:

  InternalAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      VpcId:
        Ref: InternalVpcId

  InternalApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets:
        Ref: InternalSubnets
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '3600'
      - Key: deletion_protection.enabled
        Value: 'false'
      - Key: routing.http2.enabled
        Value: 'true'
      SecurityGroups:
      - Ref: InternalAlbSecurityGroup

  InternalAlbListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: redirect
        RedirectConfig:
          Host: '#{host}'
          Path: '/#{path}'
          Port: '443'
          Protocol: HTTPS
          Query: '#{query}'
          StatusCode: HTTP_301
      LoadBalancerArn:
        Ref: InternalApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  InternalHttpListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: fixed-response
        FixedResponseConfig:
          StatusCode: 200
          ContentType: application/json
          MessageBody:
            '{ "msg":"Ciao dal load balancer interno"}'
      Conditions:
      - Field: path-pattern
        PathPatternConfig:
          Values:
          - '/welcome'
      ListenerArn:
        Ref: InternalAlbListenerHttp
      Priority: 10
  
  InternalNLbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      VpcId:
        Ref: InternalVpcId

  InternalNetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      #Scheme: internet-facing
      Scheme: internal
      Type: network
      SubnetMappings:
        - SubnetId: !Select [ 0, !Ref InternalSubnets] 
          PrivateIPv4Address: !Select [ 0, !Ref InternalNlbIps ]
        - SubnetId: !Select [ 1, !Ref InternalSubnets] 
          PrivateIPv4Address: !Select [ 1, !Ref InternalNlbIps ]
        - SubnetId: !Select [ 2, !Ref InternalSubnets] 
          PrivateIPv4Address: !Select [ 2, !Ref InternalNlbIps ]
      #Subnets:
      #  Ref: InternalSubnets
      LoadBalancerAttributes:
      # - Key: idle_timeout.timeout_seconds
      #   Value: '3600'
      - Key: deletion_protection.enabled
        Value: 'false'
      # - Key: routing.http2.enabled
      #   Value: 'true'
      #SecurityGroups:
      #- Ref: ExternalAlbSecurityGroup

  InternalNlbListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        ForwardConfig:
          TargetGroups:
            - TargetGroupArn: !Ref InternalAlbTargetGroup
      LoadBalancerArn:
        Ref: InternalNetworkLoadBalancer
      Port: 80
      Protocol: TCP


  ExternalApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      #Type: network
      Subnets:
        Ref: ExternalSubnets
      LoadBalancerAttributes:
      # - Key: idle_timeout.timeout_seconds
      #   Value: '3600'
      - Key: deletion_protection.enabled
        Value: 'false'
      # - Key: routing.http2.enabled
      #   Value: 'true'
      SecurityGroups:
      - Ref: ExternalAlbSecurityGroup
  
  ExternalAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      VpcId:
        Ref: ExternalVpcId

  ExternalAlbListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        ForwardConfig:
          TargetGroups:
            - TargetGroupArn: !Ref ExternalIpsTargetGroup
      LoadBalancerArn:
        Ref: ExternalApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-FS-1-2-Res-2020-10
      Certificates:
      - CertificateArn:
          Ref: Certificate

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Ref: DomainName
      DomainValidationOptions:
      - DomainName:
          Ref: DomainName
        HostedZoneId:
          Ref: HostedZoneId
      SubjectAlternativeNames:
      - Ref: DomainName
      - Fn::Sub: "*.${DomainName}"
      ValidationMethod: DNS

  ExternalIpsTargetGroup:
    DependsOn:
      - InternalNlbListenerHttp
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Protocol: HTTP
      Port: 80
      VpcId: !Ref ExternalVpcId
      TargetType: ip
      Targets:
        - Id: !Select [ 0, !Ref InternalNlbIps ]
          AvailabilityZone: all
            # Fn::Select:
            #   - 0 
            #   - Fn::GetAZs: !Ref AWS::Region
        - Id: !Select [ 1, !Ref InternalNlbIps ]
          AvailabilityZone: all
            # Fn::Select:
            #   - 1 
            #   - Fn::GetAZs: !Ref AWS::Region
        - Id: !Select [ 2, !Ref InternalNlbIps ]
          AvailabilityZone: all
            # Fn::Select:
            #   - 2 
            #   - Fn::GetAZs: !Ref AWS::Region

  InternalAlbTargetGroup:
    DependsOn:
      - InternalAlbListenerHttp
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Protocol: TCP
      Port: 80
      VpcId: !Ref InternalVpcId
      TargetType: alb
      Targets:
      - Id: !Ref InternalApplicationLoadBalancer

  InternalServiceEndpoint:
    Type: AWS::EC2::VPCEndpointService
    Properties: 
      AcceptanceRequired: false
      NetworkLoadBalancerArns: 
        - !Ref InternalNetworkLoadBalancer
  
  # ExternalEndpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties: 
  #     PrivateDnsEnabled: true
  #     SecurityGroupIds: 
  #       - !Ref ExternalEndpointSecurityGroup
  #     ServiceName: !Sub 'com.amazonaws.vpce.${AWS::Region}.${InternalServiceEndpoint}'
  #     SubnetIds: !Ref ExternalSubnets
  #     VpcEndpointType: Interface
  #     VpcId: !Ref ExternalVpcId


  # ExternalEndpointSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Security group for ALB
  #     SecurityGroupIngress:
  #     - IpProtocol: tcp
  #       FromPort: 80
  #       ToPort: 80
  #       CidrIp: 0.0.0.0/0
  #     - IpProtocol: tcp
  #       FromPort: 443
  #       ToPort: 443
  #       CidrIp: 0.0.0.0/0
  #     VpcId:
  #       Ref: ExternalVpcId

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - ExternalApplicationLoadBalancer
          - DNSName
        EvaluateTargetHealth: true
        HostedZoneId:
          Fn::GetAtt:
          - ExternalApplicationLoadBalancer
          - CanonicalHostedZoneID
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Ref: DomainName
      Type: A

  WildcardDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - ExternalApplicationLoadBalancer
          - DNSName
        EvaluateTargetHealth: true
        HostedZoneId:
          Fn::GetAtt:
          - ExternalApplicationLoadBalancer
          - CanonicalHostedZoneID
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Fn::Sub: "*.${DomainName}"
      Type: A


  

#Outputs:

  