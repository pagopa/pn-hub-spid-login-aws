---
AWSTemplateFormatVersion: '2010-09-09'
Description: SPID Hub - Service - SPID Hub


Parameters:

  Project:
    Description: The project
    MinLength: 3
    Type: String

  Environment:
    Description: The enviroment
    MinLength: 3
    Type: String
    AllowedValues:
    - dev
    - uat
    - test
    - prod
    - svil
    - coll
    - cert
    - hotfix

  Name:
    Default: hub-login
    Description: The name of the service
    Type: String

  Port:
    Default: 8080
    Description: The port of the service
    Type: Number

  Version:
    Description: The image version to use
    Type: String
  
  AutoscalingCheckPeriod:
    Default: 60
    Description: Tempo di misurazione delle metriche di autoscaling
    Type: Number

  Storage:
    AllowedPattern: ^((?!xn--)(?!.*-s3alias)[a-z0-9][a-z0-9-]{1,61}[a-z0-9])$
    Description: The S3 bucked used as storage
    Type: String

  ConfigVersion:
    AllowedPattern: ^v[0-9\.]+$
    Description: The configuration version to get from the storage
    Type: String

  Secrets:
    Description: The name of the Secret in SecretManager
    Type: String

  Cluster:
    Description: The name of the ECS Cluster
    Type: String

  Subnets:
    Description: The BackEnd Subnets in which deploy the service
    Type: List<AWS::EC2::Subnet::Id>

  ListenerArn:
    Description: The ARN of the ALB Listener
    Type: String

  ApplicationLoadBalancerFullName:
    Type: String

  DomainName:
    AllowedPattern: ^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$
    Description: The domain name
    Type: String

  VpcId:
    Description: The VPC in which deploy the service
    Type: AWS::EC2::VPC::Id

  IngressSecurityGroup:
    Description: The Security Group from which incoming requests will arrive
    Type: AWS::EC2::SecurityGroup::Id

  RedisSecurityGroup:
    Description: The Security Group for outgoing Redis connection
    Type: AWS::EC2::SecurityGroup::Id

  RedisEndpoint:
    Description: The endpoint for Redis
    Type: String

  RedisPort:
    Description: The port for Redis
    Type: Number

  RedisSecret:
    Description: The ARN of the Secret in SecretManager for Redis Auth
    Type: String

  AlarmSNSTopicName:
    Type: String
    Description: "The name of an SNS topic where to send alarm."

  CPUUtilizationThreshold:
    Description: The threshold percentage of CPU usage to raise alarm.
    Type: Number
    MinValue: 0
    MaxValue: 100
    Default: 60

  MemoryUtilizationThreshold:
    Description: The threshold percentage of CPU usage to raise alarm.
    Type: Number
    MinValue: 0
    MaxValue: 100
    Default: 60

  BucketLifecycleRetentionExpirationInDays:
    Default: 15
    Description: Il numero di giorni dopo la creazione quando gli oggetti vengono eliminati da Amazon S3 e Amazon S3 Glacier. Questo vale per l'ambiente DEV, SVIL, UAT e COLL
    Type: Number

  BucketLifecycleRetentionExpirationInDaysProd:
    Default: 3653
    Description: Il numero di giorni dopo la creazione quando gli oggetti vengono eliminati da Amazon S3 e Amazon S3 Glacier. Questo vale per l'ambiente PROD
    Type: Number

  HelpdeskAccountId:
    Type: String
    Default: ''
    Description: Helpdesk account ID

  LogextractorExecutionRole:
    Type: String
    Default: ''

  LogRetention:
    Type: Number
    Default: 14
  
  AutoscalingThreshold:
    Default: 326
    Type: String

  MinTasksNumber:
    Default: 1
    Type: Number
    Description: minimum autoscaling number of tasks

  MaxTasksNumber:
    Default: 1
    Type: Number
    Description: maximum autoscaling number of tasks


## Note: When adding a new Environment that requires Object Lock Enabled please remember to add the same in the mapping bellow as well as condition.
Mappings:
  RetentionModeMap:
    dev:
      "Mode": "NONE"
    svil:
      "Mode": "GOVERNANCE"
    cert:
      "Mode": "GOVERNANCE"
    uat:
      "Mode": "GOVERNANCE"
    test:
      "Mode": "GOVERNANCE"
    coll:
      "Mode": "GOVERNANCE"
    hotfix:
      "Mode": "GOVERNANCE"      
    prod:
      "Mode": "GOVERNANCE"

Conditions:
  IsSvil: !Equals [!Ref Environment, "svil"]
  IsProd: !Equals [!Ref Environment, "prod"]
  IsColl: !Equals [!Ref Environment, "coll"]
  IsUat: !Equals [!Ref Environment, "uat"]
  IsTest: !Equals [!Ref Environment, "test"]
  IsCert: !Equals [!Ref Environment, "cert"]
  IsHotfix: !Equals [!Ref Environment, "hotfix"]
  
  HasHelpdeskAccountId: !Not
    - !Equals
      - !Ref HelpdeskAccountId
      - ""

  IsObjectLockEnabled: !Or [ Condition: IsProd, Condition: IsHotfix, Condition: IsColl, Condition: IsUat, Condition: IsTest, Condition: IsCert, Condition: IsSvil ]
  
  AlarmEnabled: !Not
    - !Equals
      - !Ref AlarmSNSTopicName
      - ""

Resources:

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: main
        Image: !Sub "ghcr.io/pagopa/hub-spid-login-ms:${Version}"
#        Image: "911845998067.dkr.ecr.eu-south-1.amazonaws.com/hub-spid-login-ms:7a10088af7f12119c87701597a4efcaba0cef037"
        Cpu: 2048
        Memory: 4096
        #MemoryReservation: 512
        Environment:
        - Name: REDIS_URL
          Value:
            Ref: RedisEndpoint
        - Name: REDIS_PORT
          Value:
            Ref: RedisPort
        - Name: REDIS_CLUSTER_ENABLED
          Value: 'false'
        - Name: REDIS_TLS_ENABLED
          Value: 'true'
        - Name: SPID_LOGS_STORAGE_CONTAINER_NAME
          Value:
            Ref: SamlAssertionLogBucketV1
        EnvironmentFiles:
        - Type: s3
          Value:
            Fn::Sub: "arn:aws:s3:::${Storage}/config/${Name}/${ConfigVersion}/.env"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-region:
              Ref: AWS::Region
            awslogs-group:
              Ref: LogGroup
            awslogs-stream-prefix: logs
        PortMappings:
        - ContainerPort:
            Ref: Port
          Protocol: tcp
        LinuxParameters:
          InitProcessEnabled: true
        Privileged: false
        Secrets:
        - Name: METADATA_PRIVATE_CERT
          ValueFrom:
            Fn::Sub: "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Secrets}:MakecertPrivate:AWSCURRENT:"
        - Name: METADATA_PUBLIC_CERT
          ValueFrom:
            Fn::Sub: "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Secrets}:MakecertPublic:AWSCURRENT:"
        - Name: JWT_TOKEN_PRIVATE_KEY
          ValueFrom:
            Fn::Sub: "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Secrets}:JwtTokenPrivateKey:AWSCURRENT:"
        - Name: USER_REGISTRY_API_KEY
          ValueFrom:
            Fn::Sub: "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Secrets}:UserRegistryApiKey:AWSCURRENT:"
        - Name: SPID_LOGS_PUBLIC_KEY
          ValueFrom:
            Fn::Sub: "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Secrets}:LogsPublicKey:AWSCURRENT:"
        - Name: REDIS_PASSWORD
          ValueFrom:
            Fn::Sub: "${RedisSecret}:AuthToken:AWSCURRENT:"
      Cpu: 2048
      Memory: 4096
      ExecutionRoleArn:
        Fn::GetAtt:
        - TaskExecutionRole
        - Arn
      Family:
        Fn::Sub: "${Project}-${Environment}-${Name}"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      TaskRoleArn:
        Ref: Role

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - RedisOutgoing
    Properties:
      Cluster:
        Ref: Cluster
      EnableECSManagedTags: true
      EnableExecuteCommand: true
      DesiredCount: 21
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: main
        ContainerPort:
          Ref: Port
        TargetGroupArn:
          Ref: TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - Ref: SecurityGroup
          Subnets:
            Ref: Subnets
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceName:
        Fn::Sub: "${Project}-${Environment}-${Name}"
      TaskDefinition:
        Ref: TaskDefinition
      Tags:
        - Key: pn-eni-related
          Value: "true"
        - Key: pn-eni-related-groupName-regexp
          Value: !Base64 "^spidhub-prod-HubLogin.*$"       

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      Conditions:
      - Field: host-header
        HostHeaderConfig:
          Values:
          - Fn::Sub: "${Name}.*"
      ListenerArn:
        Ref: ListenerArn
      Priority: 30

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckProtocol: HTTP
      HealthCheckPath: /healthcheck
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: 200
      Port:
        Ref: Port
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: 'false'
      - Key: stickiness.type
        Value: 'lb_cookie'
      - Key: deregistration_delay.timeout_seconds
        Value: '30'
      - Key: slow_start.duration_seconds
        Value: '0'
      - Key: load_balancing.algorithm.type
        Value: least_outstanding_requests
      TargetType: ip
      UnhealthyThresholdCount: 6
      VpcId:
        Ref: VpcId

  #### Scaling Up Policy
  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: 'spidhub-ScaleUpPolicy'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        MinAdjustmentMagnitude: 1
        Cooldown: !Ref AutoscalingCheckPeriod
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 25
            ScalingAdjustment: 50
          - MetricIntervalLowerBound: 25
            MetricIntervalUpperBound: 50
            ScalingAdjustment: 100
          - MetricIntervalLowerBound: 50
            MetricIntervalUpperBound: 75
            ScalingAdjustment: 150
          - MetricIntervalLowerBound: 75
            ScalingAdjustment: 200

  #### Scaling Down Policy
  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: 'spidhub-ScaleDownPolicy'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: !Ref AutoscalingCheckPeriod
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            MetricIntervalLowerBound: -30
            ScalingAdjustment: -1
          - MetricIntervalUpperBound: -30
            ScalingAdjustment: -2
  
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinTasksNumber
      MaxCapacity: !Ref MaxTasksNumber
      RoleARN:
        Fn::Sub: "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      ResourceId:
        Fn::Sub:
        - "service/${Cluster}/${ServiceName}"
        - ServiceName:
            Fn::GetAtt:
            - Service
            - Name
  
  #### Alarm for Rest-API metric Autoscaling
  AlarmHighRequests:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "spidhub-autoscaling-rest"
      AlarmDescription: "Trigger scaling based on APIs"
      ActionsEnabled: TRUE
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      Threshold: 60
      TreatMissingData: ignore
      AlarmActions:
        - !Ref ScaleUpPolicy
      OKActions:
        - !Ref ScaleDownPolicy
      Metrics:
        - Id: rpt
          MetricStat:
            Metric:
              Namespace: AWS/ApplicationELB
              MetricName: RequestCountPerTarget
              Dimensions:
                - Name: TargetGroup
                  Value: !GetAtt TargetGroup.TargetGroupFullName
            Period: !Ref AutoscalingCheckPeriod
            Stat: Sum
          ReturnData: False
        - Id: req_per_targ
          Expression: !Sub "(100 * rpt) / ${AutoscalingThreshold}"
          Label: "spidhub-api-autoscale-metric"

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Service
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort:
          Ref: Port
        ToPort:
          Ref: Port
        CidrIp: 0.0.0.0/0
      VpcId:
        Ref: VpcId

  RedisOutgoing:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: !Sub "Connection from ${Project}-${Environment}-${Name} service"
      FromPort:
        Ref: RedisPort
      ToPort:
        Ref: RedisPort
      GroupId:
        Ref: RedisSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: SecurityGroup

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action: sts:AssumeRole

  ExecuteCommand:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: EnableExecuteCommand
      Roles:
      - Ref: Role
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ssmmessages:CreateControlChannel
          - ssmmessages:CreateDataChannel
          - ssmmessages:OpenControlChannel
          - ssmmessages:OpenDataChannel
          Resource: "*"
        - Effect: Allow
          Action:
          - ecr:*
          Resource: "*"

  S3Objects:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Put files to S3
      Roles:
      - Ref: Role
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - Fn::Sub: "arn:aws:s3:::${SamlAssertionLogBucketV1}/*"

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Description: Task Execution Role for Amazon ECS
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskExecutionEcr:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Get service configuration for ECR
      Roles:
      - Ref: TaskExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Resource:
              - '*'


  TaskExecutionS3Config:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Get service configuration files from S3
      Roles:
      - Ref: TaskExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource:
          - Fn::Sub: "arn:aws:s3:::${Storage}/config/${Name}/*"
        - Effect: Allow
          Action:
          - s3:GetBucketLocation
          Resource:
          - Fn::Sub: "arn:aws:s3:::${Storage}"

  TaskExecutionSecrets:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Get service secrets from SecretManager
      Roles:
      - Ref: TaskExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          - kms:Decrypt
          Resource:
          - Ref: RedisSecret
          - Fn::Sub: "arn:${AWS::Partition}:secretsmanager:*:${AWS::AccountId}:secret:${Secrets}-*"
          - Fn::Sub: "arn:${AWS::Partition}:kms:*:${AWS::AccountId}:alias/aws/secretsmanager"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: "${Project}-${Environment}-${Name}"
      RetentionInDays: !Ref LogRetention

  SamlAssertionLogBucketKey:
    Type: AWS::KMS::Key
    Properties:
      Enabled: true
      EnableKeyRotation: true
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT
      MultiRegion: false
      PendingWindowInDays: 7
      KeyPolicy:
        Version: '2012-10-17'
        Id: auto-s3-2
        Statement:
        - Sid: Allow access through S3 for all principals authorized to use S3
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:DescribeKey
          Resource: "*"
          Condition:
            StringEquals:
              kms:ViaService:
                Fn::Sub: "s3.${AWS::Region}.amazonaws.com"
              kms:CallerAccount:
                Ref: AWS::AccountId
        - Sid: Allow direct access to key metadata to the account
          Effect: Allow
          Principal:
            AWS:
              Fn::Sub: "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
          Action:
          - kms:*
          Resource: "*"
        - Fn::If:
          - HasHelpdeskAccountId
          - Sid: Allow helpdesk account kms usage
            Effect: Allow
            Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${HelpdeskAccountId}:root"
            Resource: "*"
            Condition: 
              ArnEquals: 
                aws:PrincipalArn: !Sub "arn:${AWS::Partition}:iam::${HelpdeskAccountId}:role/${LogextractorExecutionRole}"
          - !Ref AWS::NoValue

  SamlAssertionLogBucketV1:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
            KMSMasterKeyID:
              Ref: SamlAssertionLogBucketKey
          BucketKeyEnabled: true
      LifecycleConfiguration:
        Rules:
          - Id: !Sub RetentionPeriod-${Project}-${Environment}
            ExpirationInDays: !If [IsProd, !Ref BucketLifecycleRetentionExpirationInDaysProd, !Ref BucketLifecycleRetentionExpirationInDays]
            Status: Enabled
      ObjectLockEnabled:
        Fn::If:
        - IsObjectLockEnabled
        - True
        - !Ref "AWS::NoValue"
      ObjectLockConfiguration:
        Fn::If:
        - IsObjectLockEnabled
        - ObjectLockEnabled: Enabled
          Rule:
            DefaultRetention:
              Days: !If [IsProd, !Ref BucketLifecycleRetentionExpirationInDaysProd, !Ref BucketLifecycleRetentionExpirationInDays]
              Mode: !FindInMap [RetentionModeMap, !Ref Environment, Mode]
        - !Ref "AWS::NoValue"

  ECSCPUUtilizationAlarm:
    Condition: AlarmEnabled
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Project}-${Environment}-hub-ecs-cpu-utilization
      AlarmDescription: "CloudWatch alarm for hub-login ECS CPU Utilization."
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}"
      InsufficientDataActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}"
      OKActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}"
      DatapointsToAlarm: 1
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Statistic: Sum
      Threshold: !Ref CPUUtilizationThreshold
      TreatMissingData: missing

  ECSMemoryUtilizationAlarm:
    Condition: AlarmEnabled
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Project}-${Environment}-hub-ecs-memory-utilization
      AlarmDescription: "CloudWatch alarm for Hub-login ECS Memory Utilization."
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}"
      InsufficientDataActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}"
      OKActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}"
      DatapointsToAlarm: 1
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      MetricName: MemoryUtilization
      Namespace: AWS/ECS
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Statistic: Sum
      Threshold: !Ref MemoryUtilizationThreshold
      TreatMissingData: missing

  # CloudWatch metric to filer ERROR lines, in Log group
  ErrorLogsMetricFilter: 
    Condition: AlarmEnabled
    Type: AWS::Logs::MetricFilter
    Properties: 
      LogGroupName: !Ref LogGroup
      FilterPattern: '?Error ?error'
      MetricTransformations: 
        - MetricValue: 1
          MetricNamespace: "ErrorLogs"
          MetricName: "HubLogin-ErrorMetric"
  
  ApplicationLoadBalancerAlarm:
    Condition: AlarmEnabled
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Project}-${Environment}-ExternalELBAlarm"
      AlarmDescription: "CloudWatch alarm when an application load balancer respond with a HTTP status 500."
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
      InsufficientDataActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
      OKActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
      DatapointsToAlarm: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 5
      Threshold: 1
      TreatMissingData: notBreaching
      Metrics:
        ## disalbed 4xx alb alarms becuase it is generating too many false positives
        ## we need to enabled access log to dig it deeper
        # - Id: m1
        #   MetricStat:
        #     Metric:
        #       Dimensions:
        #         - Name: LoadBalancer
        #           Value: !Ref ApplicationLoadBalancerFullName
        #       MetricName: HTTPCode_ELB_4XX_Count
        #       Namespace: AWS/ApplicationELB
        #     Period: 60
        #     Stat: Sum
        #   ReturnData: False
        - Id: m2
          MetricStat:
            Metric:
              Dimensions:
                - Name: LoadBalancer
                  Value: !Ref ApplicationLoadBalancerFullName
              MetricName: HTTPCode_ELB_5XX_Count
              Namespace: AWS/ApplicationELB
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m3
          MetricStat:
            Metric:
              Dimensions:
                - Name: LoadBalancer
                  Value: !Ref ApplicationLoadBalancerFullName
                - Name: TargetGroup
                  Value: !GetAtt TargetGroup.TargetGroupFullName
              MetricName: HTTPCode_Target_4XX_Count
              Namespace: AWS/ApplicationELB
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m4
          MetricStat:
            Metric:
              Dimensions:
                - Name: LoadBalancer
                  Value: !Ref ApplicationLoadBalancerFullName
                - Name: TargetGroup
                  Value: !GetAtt TargetGroup.TargetGroupFullName
              MetricName: HTTPCode_Target_5XX_Count
              Namespace: AWS/ApplicationELB
            Period: 60
            Stat: Sum
          ReturnData: False          
        - Id: e1
          Expression: m2+m3+m4
          Label: !Sub "${Project}-${Environment}-ExternalELBAlarm-alarm-metric"

  ApplicationLoadBalancerOnCallAlarm:
    Condition: AlarmEnabled
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "oncall-${Project}-${Environment}-ExternalELBAlarm"
      AlarmDescription: "CloudWatch alarm when an application load balancer respond with a HTTP status 500."
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
      InsufficientDataActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
      OKActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
      DatapointsToAlarm: 5
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 30
      Threshold: 1
      TreatMissingData: notBreaching
      Metrics:
        ## disalbed 4xx alb alarms becuase it is generating too many false positives
        # - Id: m1
        #   MetricStat:
        #     Metric:
        #       Dimensions:
        #         - Name: LoadBalancer
        #           Value: !Ref ApplicationLoadBalancerFullName
        #       MetricName: HTTPCode_ELB_4XX_Count
        #       Namespace: AWS/ApplicationELB
        #     Period: 60
        #     Stat: Sum
        #   ReturnData: False
        - Id: m2
          MetricStat:
            Metric:
              Dimensions:
                - Name: LoadBalancer
                  Value: !Ref ApplicationLoadBalancerFullName
              MetricName: HTTPCode_ELB_5XX_Count
              Namespace: AWS/ApplicationELB
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m3
          MetricStat:
            Metric:
              Dimensions:
                - Name: LoadBalancer
                  Value: !Ref ApplicationLoadBalancerFullName
                - Name: TargetGroup
                  Value: !GetAtt TargetGroup.TargetGroupFullName
              MetricName: HTTPCode_Target_4XX_Count
              Namespace: AWS/ApplicationELB
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m4
          MetricStat:
            Metric:
              Dimensions:
                - Name: LoadBalancer
                  Value: !Ref ApplicationLoadBalancerFullName
                - Name: TargetGroup
                  Value: !GetAtt TargetGroup.TargetGroupFullName
              MetricName: HTTPCode_Target_5XX_Count
              Namespace: AWS/ApplicationELB
            Period: 60
            Stat: Sum
          ReturnData: False          
        - Id: m5
          MetricStat:
            Metric:
              Dimensions:
                - Name: LoadBalancer
                  Value: !Ref ApplicationLoadBalancerFullName
              MetricName: RequestCount
              Namespace: AWS/ApplicationELB
            Period: 60
            Stat: Sum
          ReturnData: False          
        - Id: m6
          MetricStat:
            Metric:
              Dimensions:
                - Name: LoadBalancer
                  Value: !Ref ApplicationLoadBalancerFullName
                - Name: TargetGroup
                  Value: !GetAtt TargetGroup.TargetGroupFullName
              MetricName: RequestCountPerTarget
              Namespace: AWS/ApplicationELB
            Period: 60
            Stat: Sum
          ReturnData: False      
        - Id: e1
          Expression: IF((m5>=10 AND m2/m5>=0.3) OR (m6>10 AND (m3/m6>=0.9 OR m4/m6>=0.3)), 1, 0)
          Label: !Sub "${Project}-${Environment}-ExternalELBAlarm-oncall-metric"

  # NOTE: The error log alarm has been disabled due to a bug on hub-spid-login-ms that logs an error on each successfull login (HSL-17). 
  # Login service can still be monitored using spidhub-<codice-ambiente>-ExternalALBAlarm Alarm.
  # Create alarm
  # ErrorLogsMetricAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Condition: AlarmEnabled
  #   DependsOn: ErrorLogsMetricFilter
  #   Properties:
  #     AlarmName: !Sub ${Project}-${Environment}-hub-ecs-log-alarm
  #     AlarmDescription: "CloudWatch alarm for when ECS LogGroup has ERROR line."
  #     TreatMissingData: notBreaching
  #     AlarmActions: 
  #       - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}"
  #     OKActions:
  #       - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}"
  #     DatapointsToAlarm: 1
  #     MetricName: "HubLogin-ErrorMetric"
  #     Namespace: "ErrorLogs"
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     EvaluationPeriods: 60
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 1

  # Bucket Policy to allow readonly bucket access from Helpdesk account ECS Role
  SamlAssertionHelpdeskResourcePolicy:
    Type: AWS::S3::BucketPolicy
    Condition: HasHelpdeskAccountId
    Properties: 
      Bucket: !Ref SamlAssertionLogBucketV1
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AWSHelpdeskRead",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:${AWS::Partition}:iam::${HelpdeskAccountId}:root"
              },
              "Action": [
                "s3:Get*"
              ],
              "Resource": [
                "arn:${AWS::Partition}:s3:::${SamlAssertionLogBucketV1}/*"
              ],
              "Condition": {
                "ArnEquals": {"aws:PrincipalArn": "arn:${AWS::Partition}:iam::${HelpdeskAccountId}:role/${LogextractorExecutionRole}"}
              }
            }
          ]
        }

Outputs:
  SamlAssertionLogBucket:
    Description: The ARN of the SAML Assertion Bucket
    Value:
      Ref: SamlAssertionLogBucketV1

  ServiceName:
    Description: Saml check service name
    Value: !GetAtt Service.Name
  
  ClusterName:
    Description: ECS Cluster Name
    Value: !Ref Cluster
