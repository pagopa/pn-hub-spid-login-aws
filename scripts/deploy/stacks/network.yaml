---
AWSTemplateFormatVersion: '2010-09-09'
Description: SPID Hub - Network


Parameters:

  Project:
    Description: The project
    MinLength: 3
    Type: String

  Environment:
    Description: The enviroment
    MinLength: 3
    Type: String
    AllowedValues:
    - dev
    - uat
    - prod
    - svil
    - coll
    - cert
    - hotfix

  CIDRVPC:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: CIDR block for VPC
    Type: String

  CIDRDataA:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: CIDR block for subnet Data A
    Type: String

  CIDRDataB:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: CIDR block for subnet Data B
    Type: String

  CIDRDataC:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: CIDR block for subnet Data C
    Type: String

  CIDRBackEndA:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: CIDR block for subnet BackEnd A
    Type: String

  CIDRBackEndB:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: CIDR block for subnet BackEnd B
    Type: String

  CIDRBackEndC:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: CIDR block for subnet BackEnd C
    Type: String

  CIDRFrontEndA:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: CIDR block for subnet FrontEnd A
    Type: String

  CIDRFrontEndB:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: CIDR block for subnet FrontEnd B
    Type: String

  CIDRFrontEndC:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: CIDR block for subnet FrontEnd C
    Type: String


Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: CIDRVPC
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}"

  AttachIntGatewayToVpc:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  DataSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRDataA
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-da-a"
      VpcId:
        Ref: VPC

  DataSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRDataB
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-da-b"
      VpcId:
        Ref: VPC

  DataSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRDataC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-da-c"
      VpcId:
        Ref: VPC

  BackEndSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRBackEndA
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-be-a"
      VpcId:
        Ref: VPC

  BackEndSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRBackEndB
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-be-b"
      VpcId:
        Ref: VPC

  BackEndSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRBackEndC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-be-c"
      VpcId:
        Ref: VPC

  FrontEndSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRFrontEndA
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-fe-a"
      VpcId:
        Ref: VPC

  FrontEndSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRFrontEndB
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-fe-b"
      VpcId:
        Ref: VPC

  FrontEndSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRFrontEndC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-fe-c"
      VpcId:
        Ref: VPC

  DataRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-da-a"
      VpcId:
        Ref: VPC

  DataRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-da-b"
      VpcId:
        Ref: VPC

  DataRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-da-c"
      VpcId:
        Ref: VPC

  BackEndRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-be-a"
      VpcId:
        Ref: VPC

  BackEndRouteA1:
    Type: AWS::EC2::Route
    DependsOn:
    - AttachIntGatewayToVpc
    Properties:
      RouteTableId:
        Ref: BackEndRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGatewayA

  BackEndRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-be-b"
      VpcId:
        Ref: VPC

  BackEndRouteB1:
    Type: AWS::EC2::Route
    DependsOn:
    - AttachIntGatewayToVpc
    Properties:
      RouteTableId:
        Ref: BackEndRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGatewayB

  BackEndRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-be-c"
      VpcId:
        Ref: VPC

  BackEndRouteC1:
    Type: AWS::EC2::Route
    DependsOn:
    - AttachIntGatewayToVpc
    Properties:
      RouteTableId:
        Ref: BackEndRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGatewayC

  FrontEndRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-fe-a"
      VpcId:
        Ref: VPC

  FrontEndRouteA1:
    Type: AWS::EC2::Route
    DependsOn:
    - AttachIntGatewayToVpc
    Properties:
      RouteTableId:
        Ref: FrontEndRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  FrontEndRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-fe-b"
      VpcId:
        Ref: VPC

  FrontEndRouteB1:
    Type: AWS::EC2::Route
    DependsOn:
    - AttachIntGatewayToVpc
    Properties:
      RouteTableId:
        Ref: FrontEndRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  FrontEndRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-fe-c"
      VpcId:
        Ref: VPC

  FrontEndRouteC1:
    Type: AWS::EC2::Route
    DependsOn:
    - AttachIntGatewayToVpc
    Properties:
      RouteTableId:
        Ref: FrontEndRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  DataSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DataSubnetA
      RouteTableId:
        Ref: DataRouteTableA

  DataSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DataSubnetB
      RouteTableId:
        Ref: DataRouteTableB

  DataSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DataSubnetC
      RouteTableId:
        Ref: DataRouteTableC

  BESubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: BackEndSubnetA
      RouteTableId:
        Ref: BackEndRouteTableA

  BESubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: BackEndSubnetB
      RouteTableId:
        Ref: BackEndRouteTableB

  BESubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: BackEndSubnetC
      RouteTableId:
        Ref: BackEndRouteTableC

  FESubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: FrontEndSubnetA
      RouteTableId:
        Ref: FrontEndRouteTableA

  FESubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: FrontEndSubnetB
      RouteTableId:
        Ref: FrontEndRouteTableB

  FESubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: FrontEndSubnetC
      RouteTableId:
        Ref: FrontEndRouteTableC

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: '*'
          Action:
          - 's3:*'
          Resource:
          - 'arn:aws:s3:::*'
      RouteTableIds:
      - Ref: BackEndRouteTableA
      - Ref: BackEndRouteTableB
      - Ref: BackEndRouteTableC
      ServiceName:
        Fn::Sub: "com.amazonaws.${AWS::Region}.s3"
      VpcId:
        Ref: VPC

  EIpNatA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EIpNatB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EIpNatC:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGatewayA:
    DependsOn:
    - AttachIntGatewayToVpc
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIpNatA
        - AllocationId
      SubnetId:
        Ref: FrontEndSubnetA
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-a"

  NatGatewayB:
    DependsOn:
    - AttachIntGatewayToVpc
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIpNatB
        - AllocationId
      SubnetId:
        Ref: FrontEndSubnetB
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-b"

  NatGatewayC:
    DependsOn:
    - AttachIntGatewayToVpc
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIpNatC
        - AllocationId
      SubnetId:
        Ref: FrontEndSubnetC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${Project}-${Environment}-c"

  VpcFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn:
        Fn::GetAtt:
        - VpcFlowLogsRole
        - Arn
      LogGroupName:
        Ref: VpcFlowLogsLogGroup
      ResourceId:
        Ref: VPC
      ResourceType: VPC
      TrafficType: ALL

  VpcFlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: "${Project}-${Environment}-vpc-flow"
      RetentionInDays: 14

  VpcFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: "${Project}-${Environment}-vpc-flow"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - vpc-flow-logs.amazonaws.com
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'


Outputs:

  VPCId:
    Description: VPC Id
    Value:
      Ref: VPC

  VPCCidr:
    Description: VPC CIDR
    Value:
      Fn::GetAtt:
      - VPC
      - CidrBlock

  DataSubnets:
    Description: Data Subnets
    Value:
      Fn::Join:
      - ','
      - - Ref: DataSubnetA
        - Ref: DataSubnetB
        - Ref: DataSubnetC

  BackEndSubnets:
    Description: BackEnd Subnets
    Value:
      Fn::Join:
      - ','
      - - Ref: BackEndSubnetA
        - Ref: BackEndSubnetB
        - Ref: BackEndSubnetC

  FrontEndSubnets:
    Description: FrontEnd Subnets
    Value:
      Fn::Join:
      - ','
      - - Ref: FrontEndSubnetA
        - Ref: FrontEndSubnetB
        - Ref: FrontEndSubnetC
