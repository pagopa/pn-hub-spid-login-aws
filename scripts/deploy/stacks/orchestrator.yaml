---
AWSTemplateFormatVersion: '2010-09-09'
Description: SPID Hub - Orchestrator


Parameters:

  Project:
    Description: The project
    MinLength: 3
    Type: String

  Environment:
    Description: The enviroment
    MinLength: 3
    Type: String
    AllowedValues:
    - dev
    - uat
    - prod
    - svil
    - coll
    - cert
    - hotfix

  DomainName:
    Description: The Domain Name
    Type: String
    AllowedPattern: ^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$

  HostedZoneId:
    Description: The ID of the Route 53 Hosted Zone
    Type: AWS::Route53::HostedZone::Id
    AllowedPattern: ^Z[0-9]{6}([0-9])*[A-Z0-9]{6}([A-Z0-9])*$

  InternalVpcId:
    Description: The ID of the VPC
    Type: AWS::EC2::VPC::Id

  InternalSubnets:
    Description: The subnets on which the balancer will listen at, one for each availability zone in the order a,b,c
    Type: List<AWS::EC2::Subnet::Id>
  
  InternalNlbIps:
    Description: The list of ips of the internal network load balancer
    Type: List<String>
  
  ExternalVpcId:
    Description: The ID of the VPC
    Type: AWS::EC2::VPC::Id

  ExternalSubnets:
    Description: The subnets on which the balancer will listen at
    Type: List<AWS::EC2::Subnet::Id>

  AlarmSNSTopicName:
    Type: String
    Description: "The name of an SNS topic where to send alarm." 
  
  AlreadyCreatedCertificateArn:
    Type: String
    Default: ""
    Description: |
      If this parameter is passed the template do not create a new Certificate and use the existing one.

  CPUUtilizationThreshold:
    Description: The threshold percentage of CPU usage to raise alarm.
    Type: Number
    MinValue: 0
    MaxValue: 100
    Default: 60

  MemoryUtilizationThreshold:
    Description: The threshold percentage of CPU usage to raise alarm.
    Type: Number
    MinValue: 0
    MaxValue: 100
    Default: 60

  RequestPerIpLimit:
    Type: Number
    Description: The limit on requests per 5-minute period for a single originating IP address.
    Default: 300


Conditions:
  AlarmEnabled: !Not
    - !Equals
      - !Ref AlarmSNSTopicName
      - ""

  HasAlreadyCreatedCertificateArn: !Not
    - !Equals
      - !Ref AlreadyCreatedCertificateArn
      - ""
  
  DoNotHaveAlreadyCreatedCertificateArn: !Not [ !Condition HasAlreadyCreatedCertificateArn ]

Resources:

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
      - FARGATE
      ClusterSettings:
      - Name: containerInsights
        Value: enabled
      Configuration:
        ExecuteCommandConfiguration:
          LogConfiguration:
            CloudWatchLogGroupName:
              Fn::Sub: "${Project}-${Environment}-cluster-execute-command"
          Logging: OVERRIDE
      DefaultCapacityProviderStrategy:
      - Base: 0
        CapacityProvider: FARGATE
        Weight: 1000
      Tags:
      - Key: ecs:cluster:createdFrom
        Value: cloudformation

  InternalAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      VpcId:
        Ref: InternalVpcId

  InternalApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets:
        Ref: InternalSubnets
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '3600'
      - Key: deletion_protection.enabled
        Value: 'false'
      - Key: routing.http2.enabled
        Value: 'true'
      SecurityGroups:
      - Ref: InternalAlbSecurityGroup

  InternalAlbListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: fixed-response
        FixedResponseConfig:
          StatusCode: '404'
          ContentType: text/html
          MessageBody: |
            <html>
            <head><title>404 Not Found</title></head>
            <body>
            <center><h1>404 Not Found</h1></center>
            <hr><center>Piattaforma Notifiche</center>
            </body>
            </html>
      LoadBalancerArn:
        Ref: InternalApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  
  InternalNetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      #Scheme: internet-facing
      Scheme: internal
      Type: network
      SubnetMappings:
        - SubnetId: !Select [ 0, !Ref InternalSubnets] 
          PrivateIPv4Address: !Select [ 0, !Ref InternalNlbIps ]
        - SubnetId: !Select [ 1, !Ref InternalSubnets] 
          PrivateIPv4Address: !Select [ 1, !Ref InternalNlbIps ]
        - SubnetId: !Select [ 2, !Ref InternalSubnets] 
          PrivateIPv4Address: !Select [ 2, !Ref InternalNlbIps ]
      LoadBalancerAttributes:
      - Key: deletion_protection.enabled
        Value: 'false'
      
  InternalNlbListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        ForwardConfig:
          TargetGroups:
            - TargetGroupArn: !Ref InternalAlbTargetGroup
      LoadBalancerArn:
        Ref: InternalNetworkLoadBalancer
      Port: 80
      Protocol: TCP

  InternalAlbTargetGroup:
    DependsOn:
      - InternalAlbListenerHttp
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Protocol: TCP
      Port: 80
      VpcId: !Ref InternalVpcId
      TargetType: alb
      Targets:
      - Id: !Ref InternalApplicationLoadBalancer




  ExternalAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      VpcId:
        Ref: ExternalVpcId

  ExternalApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      #Type: network
      Subnets:
        Ref: ExternalSubnets
      LoadBalancerAttributes:
      # - Key: idle_timeout.timeout_seconds
      #   Value: '3600'
      - Key: deletion_protection.enabled
        Value: 'false'
      # - Key: routing.http2.enabled
      #   Value: 'true'
      SecurityGroups:
      - Ref: ExternalAlbSecurityGroup
  
  ExternalAlbListenerHttps:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        ForwardConfig:
          TargetGroups:
            - TargetGroupArn: !Ref ExternalIpsTargetGroup
      LoadBalancerArn:
        Ref: ExternalApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      Certificates:
      - CertificateArn:
          Fn::If:
            - HasAlreadyCreatedCertificateArn
            - !Ref AlreadyCreatedCertificateArn 
            - !Ref Certificate

  
  ExternalIpsTargetGroup:
    DependsOn:
      - InternalNlbListenerHttp
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Protocol: HTTP
      Port: 80
      VpcId: !Ref ExternalVpcId
      TargetType: ip
      Targets:
        - Id: !Select [ 0, !Ref InternalNlbIps ]
          AvailabilityZone: all
        - Id: !Select [ 1, !Ref InternalNlbIps ]
          AvailabilityZone: all
        - Id: !Select [ 2, !Ref InternalNlbIps ]
          AvailabilityZone: all
  
  ExternalAlbListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: redirect
        RedirectConfig:
          Host: '#{host}'
          Path: '/#{path}'
          Port: '443'
          Protocol: HTTPS
          Query: '#{query}'
          StatusCode: HTTP_301
      LoadBalancerArn:
        Ref: ExternalApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Condition: DoNotHaveAlreadyCreatedCertificateArn
    Properties:
      DomainName:
        Ref: DomainName
      DomainValidationOptions:
      - DomainName:
          Ref: DomainName
        HostedZoneId:
          Ref: HostedZoneId
      SubjectAlternativeNames:
      - Ref: DomainName
      - Fn::Sub: "*.${DomainName}"
      ValidationMethod: DNS

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - ExternalApplicationLoadBalancer
          - DNSName
        EvaluateTargetHealth: true
        HostedZoneId:
          Fn::GetAtt:
          - ExternalApplicationLoadBalancer
          - CanonicalHostedZoneID
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Ref: DomainName
      Type: A

  WildcardDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - ExternalApplicationLoadBalancer
          - DNSName
        EvaluateTargetHealth: true
        HostedZoneId:
          Fn::GetAtt:
          - ExternalApplicationLoadBalancer
          - CanonicalHostedZoneID
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Fn::Sub: "*.${DomainName}"
      Type: A

  ApplicationLoadBalancerAlarm:
    Condition: AlarmEnabled
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Project}-${Environment}-ExternalALBAlarm"
      AlarmDescription: "CloudWatch alarm when an application load balancer respond with a HTTP status 500."
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
      InsufficientDataActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
      OKActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
      DatapointsToAlarm: 1
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt ExternalApplicationLoadBalancer.LoadBalancerFullName
      MetricName: HTTPCode_ELB_5XX_Count
      Namespace: AWS/ApplicationELB
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  # Associate Web ACLs with Rest API
  ThrottlingToLoadBalancerAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Ref ExternalApplicationLoadBalancer
      WebACLArn: !GetAtt ThrottlingAcl.Arn

  # AWS WAF Web ACLs
  ThrottlingAcl:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Allow: {}
      Description: Throttling
      Name: 'SpidHub_WAF'
      Rules:
        - Name: "Rate-based_Rule"
          Priority: 0
          Action:
            Block: {}
          Statement:
            RateBasedStatement:
              Limit: !Ref RequestPerIpLimit
              AggregateKeyType: IP
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: "MetricForRateBasedRule"
      Scope: "REGIONAL"
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: "MetricFor-SpidHub_WAF"
        SampledRequestsEnabled: true

Outputs:

  Cluster:
    Description: ECS Cluster ARN
    Value:
      Ref: Cluster

  AlbSecurityGroup:
    Description: SecurityGroup of the ALB
    Value:
      Ref: InternalAlbSecurityGroup

  ExternalALBFullName:
    Description: External ALB full name
    Value: !GetAtt ExternalApplicationLoadBalancer.LoadBalancerFullName

  ListenerHttps:
    Description: HTTPS Listerner for ALB
    Value:
      Ref: InternalAlbListenerHttp
